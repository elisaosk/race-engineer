{"ast":null,"code":"import _objectSpread from \"/Users/elisajo/Documents/Hobby/race-engineer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/elisajo/Documents/Hobby/race-engineer/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nvar acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nvar sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nvar maxDuration = 20000;\nvar requiresPregeneratedKeyframes = function requiresPregeneratedKeyframes(valueName, options) {\n  return options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n};\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n    onComplete = _ref.onComplete,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\n   * TODO: Unify with js/index\n   */\n  var resolveFinishedPromise;\n  var currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n  var updateFinishedPromise = function updateFinishedPromise() {\n    currentFinishedPromise = new Promise(function (resolve) {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  var keyframes = options.keyframes,\n    _options$duration = options.duration,\n    duration = _options$duration === void 0 ? 300 : _options$duration,\n    ease = options.ease;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    var sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n      repeat: 0,\n      delay: 0\n    }));\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    var t = 0;\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    duration: duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = function () {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(function () {\n      return animation.cancel();\n    });\n    onComplete && onComplete();\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    then: function then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n    play: function play() {\n      return animation.play();\n    },\n    pause: function pause() {\n      return animation.pause();\n    },\n    stop: function stop() {\n      if (animation.playState === \"idle\") return;\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      var currentTime = animation.currentTime;\n      if (currentTime) {\n        var _sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n          autoplay: false\n        }));\n        value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(function () {\n        return animation.cancel();\n      });\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","_ref","onUpdate","onComplete","_objectWithoutProperties","_excluded","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","keyframes","_options$duration","duration","sampleAnimation","_objectSpread","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","onfinish","set","update","cancel","then","reject","time","currentTime","newTime","play","pause","stop","playState","autoplay","setWithVelocity"],"sources":["/Users/elisajo/Documents/Hobby/race-engineer/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        play: () => animation.play(),\n        pause: () => animation.pause(),\n        stop: () => {\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}