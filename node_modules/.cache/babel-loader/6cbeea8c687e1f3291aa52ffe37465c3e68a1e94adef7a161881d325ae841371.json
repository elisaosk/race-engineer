{"ast":null,"code":"var _jsxFileName = \"/Users/elisajo/Documents/Hobby/race-engineer/src/components/Calculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\n// import { Button } from '../stories/Button';\n// import { Colors } from '../theme/colors';\n// import \"../theme/styles.css\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calculator() {\n  _s();\n  const [rows, setRows] = useState([]);\n\n  // const StyledTableCell = styled(TableCell)(({ theme }) => ({\n  //     [`&.${tableCellClasses.head}`]: {\n  //       backgroundColor: theme.palette.common.black,\n  //       color: theme.palette.common.white,\n  //     },\n  //     [`&.${tableCellClasses.body}`]: {\n  //       fontSize: 14,\n  //     },\n  //   }));\n\n  //   const StyledTableRow = styled(TableRow)(({ theme }) => ({\n  //     '&:nth-of-type(odd)': {\n  //       backgroundColor: theme.palette.action.hover,\n  //     },\n  //     // hide last border\n  //     '&:last-child td, &:last-child th': {\n  //       border: 0,\n  //     },\n  //   }));\n\n  const getNumOfPits = (max, num) => {\n    if (num / max % 1 == 0) {\n      return num / max - 1;\n    } else return Math.floor(num / max);\n  };\n  const sortData = (data, key, limit) => {\n    let sortedData = data.sort(function (a, b) {\n      return a[key] - b[key];\n    });\n    return sortedData.slice(0, limit);\n  };\n  const calculatePitStrategy = (avgSoftTime, avgMedTime, avgHardTime, sMax, mMax, hMax, sRequired, mRequired, hRequired, pitTime, totalLaps) => {\n    let numOfSoftLaps = 0;\n    let numOfMedLaps = 0;\n    let numOfHardLaps = 0;\n    let possibleStrats = [];\n    for (let i = sRequired ? 1 : 0; i <= totalLaps; i++) {\n      numOfSoftLaps = i;\n      for (let j = mRequired ? 1 : 0; j <= totalLaps; j++) {\n        numOfMedLaps = j;\n        for (let k = hRequired ? 1 : 0; k <= totalLaps; k++) {\n          numOfHardLaps = k;\n          if (numOfSoftLaps + numOfMedLaps + numOfHardLaps === parseInt(totalLaps)) {\n            let numOfSPits = getNumOfPits(sMax, numOfSoftLaps);\n            let numOfMPits = getNumOfPits(mMax, numOfMedLaps);\n            let numOfHPits = getNumOfPits(hMax, numOfHardLaps);\n            let numOfPits = 2 + numOfSPits + numOfMPits + numOfHPits;\n            let totalTime = numOfSoftLaps * avgSoftTime + numOfMedLaps * avgMedTime + numOfHardLaps * avgHardTime + numOfPits * pitTime;\n            possibleStrats.push({\n              soft: numOfSoftLaps,\n              medium: numOfMedLaps,\n              hard: numOfHardLaps,\n              pits: numOfPits,\n              total: totalTime\n            });\n          }\n        }\n      }\n    }\n    possibleStrats = sortData(possibleStrats, \"total\", 30);\n    return possibleStrats;\n  };\n\n  // const rows = calculatePitStrategy(avgSoftTime,avgMedTime,avgHardTime,sMax,mMax,hMax,pitTime,totalLaps)\n\n  const handleSubmit = (values, props) => {\n    setRows(calculatePitStrategy(values.softTime / 60, values.medTime / 60, values.hardTime / 60, values.sMax, values.mMax, values.hMax, values.sRequired, values.mRequired, values.hRequired, values.pitTime / 60, values.totalLaps));\n    // props.resetForm();\n  };\n\n  const initialValues = {\n    softTime: \"\",\n    medTime: \"\",\n    hardTime: \"\",\n    sRequired: false,\n    mRequired: true,\n    hRequired: true,\n    sMax: \"\",\n    mMax: \"\",\n    hMax: \"\",\n    pitTime: \"\",\n    totalLaps: \"\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"RACE ENGINEER CALCULATOR\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this)\n  //     <Grid container spacing={2} backgroundColor={Colors.light} height=\"100vh\">\n  //         <Grid item xs={12} md={4} backgroundColor={Colors.light}>\n  //         <Formik\n  //       initialValues={initialValues}\n  //       onSubmit={handleSubmit}\n  //     >\n  //       {(props) => {\n  //         const {\n  //           values,\n  //           handleSubmit,\n  //           handleBlur,\n  //           setFieldValue,\n  //           handleChange,\n  //           validateOnBlur,\n  //           resetForm,\n  //           errors,\n  //           touched,\n  //           isValidating,\n  //         } = props;\n\n  //         return (\n  //           <Form onSubmit={(e) => {\n  //             e.preventDefault()\n  //             handleSubmit(e)\n  //             }} >\n  //             <Box padding=\"30px\" display=\"flex\" flexDirection={\"column\"} height=\"100%\">\n  //                 <Box display=\"flex\" justifyContent={\"space-between\"}>\n  //                 <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Average lap time soft (sec)\"\n  //                       type=\"number\"\n  //                       name=\"softTime\"\n  //                       width=\"30%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Longest stint (laps)\"\n  //                       type=\"number\"\n  //                       name=\"sMax\"\n  //                       width=\"10%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  // <Checkbox name=\"sRequired\" onChange={(e)=>props.setFieldValue(\"sRequired\",e.target.checked)} checked={props.values.sRequired} sx={{\n  //     color: \"#393e46\",\n  //     '&.Mui-checked': {\n  //       color: \"#66D893\",\n  //     },\n  //   }}>Required</Checkbox>\n  //                 </Box>\n\n  //                 <Box display=\"flex\" justifyContent={\"space-between\"} >\n  // <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Average lap time medium (sec)\"\n  //                       type=\"number\"\n  //                       name=\"medTime\"\n  //                       width=\"80%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Longest stint (laps)\"\n  //                       type=\"number\"\n  //                       name=\"mMax\"\n  //                       width=\"20%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Checkbox name=\"mRequired\" onChange={(e)=>props.setFieldValue(\"mRequired\",e.target.checked)} checked={props.values.mRequired} sx={{\n  //     color: \"#393e46\",\n  //     '&.Mui-checked': {\n  //       color: \"#66D893\",\n  //     },\n  //   }}>Required</Checkbox>\n  //                 </Box>\n  //                 <Box display=\"flex\" justifyContent={\"space-between\"} >\n  // <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Average lap time hard (sec)\"\n  //                       type=\"number\"\n  //                       name=\"hardTime\"\n  //                       width=\"80%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Field\n  //                       as={TextField}\n  //                       color=\"secondary\"\n  //                       label=\"Longest stint (laps)\"\n  //                       type=\"number\"\n  //                       name=\"hMax\"\n  //                       width=\"20%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Checkbox name=\"hRequired\" onChange={(e)=>props.setFieldValue(\"hRequired\",e.target.checked)} checked={props.values.hRequired} sx={{\n  //     color: \"#393e46\",\n  //     '&.Mui-checked': {\n  //       color: \"#66D893\",\n  //     },\n  //   }}>Required</Checkbox>\n  //                 </Box>\n  //                 <Divider />\n  //                 <Field\n  //                       as={TextField}\n  //                       value={props.values.pitTime}\n  //                       color=\"secondary\"\n  //                       label=\"Average pit delay (sec)\"\n  //                       type=\"number\"\n  //                       name=\"pitTime\"\n  //                       width=\"90%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n  //                     <Field\n  //                       as={TextField}\n  //                       value={props.values.totalLaps}\n  //                       color=\"secondary\"\n  //                       label=\"Total number of race laps\"\n  //                       type=\"number\"\n  //                       name=\"totalLaps\"\n  //                       width=\"90%\"\n  //                       variant=\"outlined\"\n  //                       margin=\"dense\"\n  //                       autoComplete=\"off\"\n  //                       helperText={<ErrorMessage name=\"email\" />}\n  //                       error={props.errors.email && props.touched.email}\n  //                     />\n\n  //                     <Box display=\"flex\" justifyContent={\"space-between\"}>\n  //                     <Button\n  //                       primary={false}\n  //                       label=\"Reset\"\n  //                       onClick={() => {\n  //                         resetForm()\n  //                         setRows([])\n  //                     }}\n  //                     >\n  //                       Reset\n  //                     </Button>\n  //                     <Button\n  //                       primary={true}\n  //                       type=\"submit\"\n  //                       label=\"Calculate\"\n  //                     //   onClick={()=>handleSubmit(values)}\n  //                     />\n  //                     </Box>\n\n  //             </Box>\n  //           </Form>\n  //         );\n  //       }}\n  //     </Formik>\n  //         </Grid>\n  //         <Grid item xs={12} md={8} backgroundColor={Colors.darkGrey} display=\"flex\" flexDirection={\"column\"} justifyContent={\"center\"} >\n\n  //        {rows.length>0 ?\n  //        <TableContainer component={Paper}>\n  //        <Table sx={{ minWidth: 650 }} aria-label=\"customized table\">\n  //          <TableHead >\n  //            <StyledTableRow >\n  //              <StyledTableCell><Typography variant=\"subtitle2\" className='font-link'> RS laps </Typography></StyledTableCell>\n  //              <StyledTableCell ><Typography variant=\"subtitle2\" className='font-link'> RM laps </Typography></StyledTableCell>\n  //              <StyledTableCell ><Typography variant=\"subtitle2\" className='font-link'> RH laps </Typography></StyledTableCell>\n  //              <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Pits </Typography></StyledTableCell>\n  //              <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Total time </Typography></StyledTableCell>\n  //             <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Difference (sec)</Typography></StyledTableCell>\n  //           </StyledTableRow >\n  //          </TableHead>\n  //         <TableBody>\n  //            {rows.map((row,i) => (\n  //             <StyledTableRow \n  //               key={i}\n  //               sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n  //             >\n  //               <StyledTableCell component=\"th\" scope=\"row\" className='font-link'>\n  //                 {row.soft}\n  //               </StyledTableCell >\n  //               <StyledTableCell className='font-link'>{row.medium}</StyledTableCell>\n  //               <StyledTableCell className='font-link'>{row.hard}</StyledTableCell>\n  //               <StyledTableCell align=\"right\" className='font-link'>{row.pits}</StyledTableCell>\n  //               <StyledTableCell align=\"right\" className='font-link'>{parseFloat(row.total.toPrecision(4))}</StyledTableCell>\n  //               <StyledTableCell align=\"right\" color=\"red\">\n  //               <Typography variant=\"body2\" color=\"red\" className='font-link'>\n  //               {i ===0 ? \"\" : \"+\" + parseFloat(((row.total-rows[0].total)*60).toPrecision(4))}\n  //             </Typography>\n  //               </StyledTableCell>\n  //             </StyledTableRow >\n  //           ))}\n  //         </TableBody>\n  //       </Table>\n  //       </TableContainer>\n  //       :\n  //       <Typography variant=\"h6\" color={Colors.light} className='font-link' > Fill in the form and click Calculate</Typography>\n  //       }\n\n  //         </Grid>\n  //     </Grid>\n  ;\n}\n_s(Calculator, \"wutb5sQbmmKt9ii8Jve1sHSx6oU=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","useRef","Formik","Field","Form","ErrorMessage","jsxDEV","_jsxDEV","Calculator","_s","rows","setRows","getNumOfPits","max","num","Math","floor","sortData","data","key","limit","sortedData","sort","a","b","slice","calculatePitStrategy","avgSoftTime","avgMedTime","avgHardTime","sMax","mMax","hMax","sRequired","mRequired","hRequired","pitTime","totalLaps","numOfSoftLaps","numOfMedLaps","numOfHardLaps","possibleStrats","i","j","k","parseInt","numOfSPits","numOfMPits","numOfHPits","numOfPits","totalTime","push","soft","medium","hard","pits","total","handleSubmit","values","props","softTime","medTime","hardTime","initialValues","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/elisajo/Documents/Hobby/race-engineer/src/components/Calculator.js"],"sourcesContent":["import React ,{useState, useRef} from 'react'\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\n// import { Button } from '../stories/Button';\n// import { Colors } from '../theme/colors';\n// import \"../theme/styles.css\"\n\n\nfunction Calculator() {\n\n    const [rows,setRows] = useState([])\n\n    // const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    //     [`&.${tableCellClasses.head}`]: {\n    //       backgroundColor: theme.palette.common.black,\n    //       color: theme.palette.common.white,\n    //     },\n    //     [`&.${tableCellClasses.body}`]: {\n    //       fontSize: 14,\n    //     },\n    //   }));\n      \n    //   const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    //     '&:nth-of-type(odd)': {\n    //       backgroundColor: theme.palette.action.hover,\n    //     },\n    //     // hide last border\n    //     '&:last-child td, &:last-child th': {\n    //       border: 0,\n    //     },\n    //   }));\n      \n\n    const getNumOfPits = (max,num) => {\n        if((num/max)%1 == 0){\n            return (num/max) - 1\n        } else return Math.floor(num/max)\n    }\n\n    const sortData = (data, key,limit) => {\n        let sortedData = data.sort(function(a,b){\n            return a[key] - b[key];\n          })\n          return sortedData.slice(0,limit)\n    }\n\n    const calculatePitStrategy = (avgSoftTime,avgMedTime,avgHardTime,sMax,mMax,hMax,sRequired,mRequired,hRequired,pitTime, totalLaps) => {\n      let numOfSoftLaps = 0\n        let numOfMedLaps = 0\n        let numOfHardLaps = 0\n        let possibleStrats = []\n        for(let i = sRequired?1:0; i<=totalLaps;i++){\n            numOfSoftLaps = i\n            for(let j = mRequired?1:0;j<=totalLaps;j++){\n                numOfMedLaps=j\n                for(let k = hRequired?1:0;k<=totalLaps;k++){\n                    numOfHardLaps = k\n                    if(numOfSoftLaps+numOfMedLaps+numOfHardLaps === parseInt(totalLaps)){\n                        let numOfSPits = getNumOfPits(sMax, numOfSoftLaps)\n                        let numOfMPits = getNumOfPits(mMax, numOfMedLaps)\n                        let numOfHPits = getNumOfPits(hMax, numOfHardLaps)\n                        let numOfPits = 2+numOfSPits+numOfMPits+numOfHPits\n                        let totalTime = numOfSoftLaps*avgSoftTime+numOfMedLaps*avgMedTime+numOfHardLaps*avgHardTime+numOfPits*pitTime\n                        possibleStrats.push({\n                            soft: numOfSoftLaps,\n                            medium: numOfMedLaps,\n                            hard: numOfHardLaps,\n                            pits: numOfPits,\n                            total:totalTime\n                        })\n                    }\n                }\n            }\n        }\n        possibleStrats = sortData(possibleStrats,\"total\",30)        \n        return possibleStrats\n    }\n\n    // const rows = calculatePitStrategy(avgSoftTime,avgMedTime,avgHardTime,sMax,mMax,hMax,pitTime,totalLaps)\n\n    const handleSubmit = (values, props) => {\n        setRows(calculatePitStrategy(values.softTime/60,values.medTime/60,values.hardTime/60,values.sMax,values.mMax,values.hMax,values.sRequired,values.mRequired,values.hRequired,values.pitTime/60,values.totalLaps))\n        // props.resetForm();\n      };\n\n    const initialValues = {\n        softTime:\"\",\n        medTime:\"\",\n        hardTime:\"\",\n        sRequired:false,\n        mRequired:true,\n        hRequired:true,\n        sMax:\"\",\n        mMax:\"\",\n        hMax:\"\",\n        pitTime:\"\",\n        totalLaps:\"\"\n    }\n\n\n\n  return (\n    <div>RACE ENGINEER CALCULATOR</div>\n//     <Grid container spacing={2} backgroundColor={Colors.light} height=\"100vh\">\n//         <Grid item xs={12} md={4} backgroundColor={Colors.light}>\n//         <Formik\n//       initialValues={initialValues}\n//       onSubmit={handleSubmit}\n//     >\n//       {(props) => {\n//         const {\n//           values,\n//           handleSubmit,\n//           handleBlur,\n//           setFieldValue,\n//           handleChange,\n//           validateOnBlur,\n//           resetForm,\n//           errors,\n//           touched,\n//           isValidating,\n//         } = props;\n\n//         return (\n//           <Form onSubmit={(e) => {\n//             e.preventDefault()\n//             handleSubmit(e)\n//             }} >\n//             <Box padding=\"30px\" display=\"flex\" flexDirection={\"column\"} height=\"100%\">\n//                 <Box display=\"flex\" justifyContent={\"space-between\"}>\n//                 <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Average lap time soft (sec)\"\n//                       type=\"number\"\n//                       name=\"softTime\"\n//                       width=\"30%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Longest stint (laps)\"\n//                       type=\"number\"\n//                       name=\"sMax\"\n//                       width=\"10%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n// <Checkbox name=\"sRequired\" onChange={(e)=>props.setFieldValue(\"sRequired\",e.target.checked)} checked={props.values.sRequired} sx={{\n//     color: \"#393e46\",\n//     '&.Mui-checked': {\n//       color: \"#66D893\",\n//     },\n//   }}>Required</Checkbox>\n//                 </Box>\n                    \n//                 <Box display=\"flex\" justifyContent={\"space-between\"} >\n// <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Average lap time medium (sec)\"\n//                       type=\"number\"\n//                       name=\"medTime\"\n//                       width=\"80%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Longest stint (laps)\"\n//                       type=\"number\"\n//                       name=\"mMax\"\n//                       width=\"20%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Checkbox name=\"mRequired\" onChange={(e)=>props.setFieldValue(\"mRequired\",e.target.checked)} checked={props.values.mRequired} sx={{\n//     color: \"#393e46\",\n//     '&.Mui-checked': {\n//       color: \"#66D893\",\n//     },\n//   }}>Required</Checkbox>\n//                 </Box>\n//                 <Box display=\"flex\" justifyContent={\"space-between\"} >\n// <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Average lap time hard (sec)\"\n//                       type=\"number\"\n//                       name=\"hardTime\"\n//                       width=\"80%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Field\n//                       as={TextField}\n//                       color=\"secondary\"\n//                       label=\"Longest stint (laps)\"\n//                       type=\"number\"\n//                       name=\"hMax\"\n//                       width=\"20%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Checkbox name=\"hRequired\" onChange={(e)=>props.setFieldValue(\"hRequired\",e.target.checked)} checked={props.values.hRequired} sx={{\n//     color: \"#393e46\",\n//     '&.Mui-checked': {\n//       color: \"#66D893\",\n//     },\n//   }}>Required</Checkbox>\n//                 </Box>\n//                 <Divider />\n//                 <Field\n//                       as={TextField}\n//                       value={props.values.pitTime}\n//                       color=\"secondary\"\n//                       label=\"Average pit delay (sec)\"\n//                       type=\"number\"\n//                       name=\"pitTime\"\n//                       width=\"90%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n//                     <Field\n//                       as={TextField}\n//                       value={props.values.totalLaps}\n//                       color=\"secondary\"\n//                       label=\"Total number of race laps\"\n//                       type=\"number\"\n//                       name=\"totalLaps\"\n//                       width=\"90%\"\n//                       variant=\"outlined\"\n//                       margin=\"dense\"\n//                       autoComplete=\"off\"\n//                       helperText={<ErrorMessage name=\"email\" />}\n//                       error={props.errors.email && props.touched.email}\n//                     />\n\n//                     <Box display=\"flex\" justifyContent={\"space-between\"}>\n//                     <Button\n//                       primary={false}\n//                       label=\"Reset\"\n//                       onClick={() => {\n//                         resetForm()\n//                         setRows([])\n//                     }}\n//                     >\n//                       Reset\n//                     </Button>\n//                     <Button\n//                       primary={true}\n//                       type=\"submit\"\n//                       label=\"Calculate\"\n//                     //   onClick={()=>handleSubmit(values)}\n//                     />\n//                     </Box>\n\n                    \n\n//             </Box>\n//           </Form>\n//         );\n//       }}\n//     </Formik>\n//         </Grid>\n//         <Grid item xs={12} md={8} backgroundColor={Colors.darkGrey} display=\"flex\" flexDirection={\"column\"} justifyContent={\"center\"} >\n        \n//        {rows.length>0 ?\n//        <TableContainer component={Paper}>\n//        <Table sx={{ minWidth: 650 }} aria-label=\"customized table\">\n//          <TableHead >\n//            <StyledTableRow >\n//              <StyledTableCell><Typography variant=\"subtitle2\" className='font-link'> RS laps </Typography></StyledTableCell>\n//              <StyledTableCell ><Typography variant=\"subtitle2\" className='font-link'> RM laps </Typography></StyledTableCell>\n//              <StyledTableCell ><Typography variant=\"subtitle2\" className='font-link'> RH laps </Typography></StyledTableCell>\n//              <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Pits </Typography></StyledTableCell>\n//              <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Total time </Typography></StyledTableCell>\n//             <StyledTableCell align=\"right\"><Typography variant=\"subtitle2\" className='font-link'> Difference (sec)</Typography></StyledTableCell>\n//           </StyledTableRow >\n//          </TableHead>\n//         <TableBody>\n//            {rows.map((row,i) => (\n//             <StyledTableRow \n//               key={i}\n//               sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n//             >\n//               <StyledTableCell component=\"th\" scope=\"row\" className='font-link'>\n//                 {row.soft}\n//               </StyledTableCell >\n//               <StyledTableCell className='font-link'>{row.medium}</StyledTableCell>\n//               <StyledTableCell className='font-link'>{row.hard}</StyledTableCell>\n//               <StyledTableCell align=\"right\" className='font-link'>{row.pits}</StyledTableCell>\n//               <StyledTableCell align=\"right\" className='font-link'>{parseFloat(row.total.toPrecision(4))}</StyledTableCell>\n//               <StyledTableCell align=\"right\" color=\"red\">\n//               <Typography variant=\"body2\" color=\"red\" className='font-link'>\n//               {i ===0 ? \"\" : \"+\" + parseFloat(((row.total-rows[0].total)*60).toPrecision(4))}\n//             </Typography>\n//               </StyledTableCell>\n//             </StyledTableRow >\n//           ))}\n//         </TableBody>\n//       </Table>\n//       </TableContainer>\n//       :\n//       <Typography variant=\"h6\" color={Colors.light} className='font-link' > Fill in the form and click Calculate</Typography>\n//       }\n   \n//         </Grid>\n//     </Grid>\n    \n\n    )\n}\n\nexport default Calculator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}